Of course. Here is the entire architecture document formatted in Markdown (`README.md`). You can copy the text below and paste it directly into Microsoft Word, and it should retain the formatting for headings, lists, bold text, and code blocks.

-----

# Architecture Design Document: TTA and QAA Agentic Integration

## Executive Summary

This document provides a comprehensive architecture design for integrating the Transaction Testing Assistant (TTA) with the QA Agent (QAA) platform, adopting an agentic workflow. As of September 14, 2025, this design establishes a clear separation of duties. In this model, the **TTA application** serves two primary functions: it acts as a **provider of specialized data-preparation tools** for the agentic ecosystem, and it hosts the **Human-in-the-Loop (HITL) interface** for final review and disposition.

The **QAA platform** hosts the **validation supervisor agent**, which orchestrates the core validation logic by consuming the tools exposed by the TTA application. The handoff between the TTA's preparation process and the QAA's validation agent is managed by a resilient, event-driven trigger mechanism. This decoupled architecture ensures modularity, scalability, and fault tolerance, supporting both one-time and batch processing scenarios while aligning with enterprise QA objectives.

-----

## Background and Objectives

### Background

  * **TTA Application Overview**: The TTA is a specialized platform that provides a suite of tools for processing transaction data (e.g., document ingestion, chunking, embedding) and a web application for **Human-in-the-Loop (HITL)** review. Its primary role is to prepare data and manage the user-facing workflow.
  * **QAA Platform Overview**: The QAA is a scalable platform for automating QA workflows. It excels at agentic orchestration, hosting intelligent agents that can consume tools, execute complex logic, and manage validation tasks in a supervised manner.
  * **Integration Rationale**: By integrating these platforms, we leverage their core strengths. The TTA application provides the foundational data processing tools and the user interface, while the QAA platform provides the intelligent agent that drives the automated validation process. This creates a powerful, symbiotic relationship where each platform focuses on its area of expertise.

### Objectives

  * Design an agentic workflow where the TTA application provides tools and the HITL interface, and the QAA agent consumes these tools for validation.
  * Implement a resilient, event-driven invocation mechanism for a seamless, asynchronous handoff.
  * Optimize the processing of large documents through TTA's specialized chunking and ranking tools.
  * Ensure a clear and logical flow where validation results from QAA are routed back to the TTA application for HITL processing.

-----

## Agentic Workflow Approach

The workflow is structured around a clear service-oriented model. The TTA application exposes its capabilities as tools, and the QAA agent acts as the primary consumer.

### 1\. Preparation Phase (within TTA Application)

A TTA preparation agent, operating within the TTA application, is initiated with a Transaction ID (e.g., `TT001`).

1.  **Data Ingestion**: The agent uses internal TTA services to fetch the transaction details, associated documents, and System of Record (SOR) data.
2.  **Preprocessing & Storage**: The agent utilizes TTA's core processing tools to:
      * Extract, clean, and chunk document content into embeddings.
      * Rank chunks for relevance and store the top 5 in a vector database.
3.  **Signal Readiness**: Upon completion, the agent publishes a **`chunks_ready` event** to a message queue. This event contains the Transaction ID and signals that the necessary data artifacts are ready for validation.

### 2\. Invocation and Handoff

The invocation is fully decoupled, ensuring the TTA and QAA systems can operate and scale independently.

  * **Event-Driven Trigger**: The QAA Supervisor Agent, hosted on the QAA platform, is subscribed to the `chunks_ready` topic. It automatically activates upon receiving an event from the message queue.
  * **Resiliency**: This asynchronous pattern provides high resiliency. If the QAA agent is temporarily down, messages will queue until it becomes available, preventing data loss. The invocation framework includes automated retries and health checks.

### 3\. Validation Phase (QAA Agent consuming TTA Tools)

Once activated, the QAA agent orchestrates the validation by calling the tools exposed by the TTA application.
4\.  **Data Retrieval**: The QAA agent makes an API call to the **"Chunk Retrieval Tool"** provided by the TTA application to fetch the top 5 relevant chunks.
5\.  **SOR Data Fetching**: The agent makes another API call to the **"SOR Access Tool"** (also provided by TTA) to get the necessary SOR data for comparison.
6\.  **LLM Validation**: With all the required data, the QAA agent sends a structured prompt to a Large Language Model (LLM) to perform the comparison and identify discrepancies.
7\.  **Return Results**: The QAA agent aggregates the validation results into a structured format (e.g., JSON) and sends them back to a designated endpoint on the TTA application.

### 4\. Completion and HITL (within TTA Application)

The TTA application receives the validation results from the QAA agent and manages the final steps of the workflow.
8\.  **HITL Triage**: The TTA application contains the business logic to analyze the results. If discrepancies are found, the transaction is automatically routed to the **HITL review queue** within the TTA web interface.
9\.  **User Notification & Reporting**: The TTA application notifies the user of the status (e.g., "Completed" or "Review Required") and generates the final audit reports.

-----

## Architecture Design

### High-Level Architecture

The architecture is composed of two primary domains—the TTA Application (Tools & UI) and the QAA Platform (Agent Orchestration)—communicating via a shared messaging infrastructure.

**Key Principles:**

  * **Service-Oriented Tooling**: The TTA application exposes its data capabilities as versioned, stateless APIs (tools) for consumption by any authorized agent, promoting reusability.
  * **Clear Ownership**: TTA owns the data lifecycle and user experience (HITL). QAA owns the automated validation logic and agent orchestration.
  * **Asynchronous Communication**: Event-driven communication is the primary method for inter-service collaboration, maximizing scalability and resilience.
  * **Modularity**: Components are designed to be independently deployable and scalable.

### Layers and Components

1.  **TTA Application Domain**:
      * **User Interface**: The web front-end for initiating tests and performing HITL reviews.
      * **Tooling Layer**: A set of microservices exposing TTA's capabilities via REST APIs (e.g., Chunk Retrieval API, SOR Access API).
      * **Workflow & HITL Logic**: The back-end service that receives results from QAA and manages the HITL queue.
      * **Preparation Agent**: The internal agent that performs the initial data processing.
2.  **QAA Platform Domain**:
      * **Agentic Orchestration Engine**: Hosts and manages the lifecycle of the QAA Supervisor Agent.
      * **QAA Supervisor Agent**: The core intelligent agent that executes the validation plan by calling TTA's tools.
3.  **Shared Infrastructure Layer**:
      * **Message Queue**: (e.g., RabbitMQ, Kafka) for asynchronous event passing.
      * **Databases**: Vector DB for embeddings and a relational DB for metadata, results, and audit trails.
      * **Monitoring & Logging Service**: Centralized logging and performance monitoring for both platforms.

-----

## Detailed Process Flow Diagram

This sequence diagram illustrates the detailed interactions between the components throughout the workflow.

```mermaid
sequenceDiagram
    participant User
    participant TTA_App_UI as TTA Application (UI & HITL)
    participant TTA_Prep_Agent as TTA Preparation Agent
    participant TTA_Tools_API as TTA Tools (API Layer)
    participant Message_Queue as Message Queue
    participant QAA_Agent as QAA Supervisor Agent
    participant LLM

    User->>TTA_App_UI: 1. Initiate Test (Transaction ID)
    TTA_App_UI->>TTA_Prep_Agent: 2. Trigger Preparation Process
    TTA_Prep_Agent->>TTA_Tools_API: 3. Ingest & Process Docs
    TTA_Tools_API-->>TTA_Prep_Agent: 4. Chunks & Embeddings Created
    TTA_Prep_Agent->>Message_Queue: 5. Publish 'chunks_ready' Event

    Message_Queue->>QAA_Agent: 6. Deliver Event (Activate Agent)
    QAA_Agent->>TTA_Tools_API: 7. Call 'GetChunks' Tool
    TTA_Tools_API-->>QAA_Agent: 8. Return Top 5 Chunks
    QAA_Agent->>TTA_Tools_API: 9. Call 'GetSOR' Tool
    TTA_Tools_API-->>QAA_Agent: 10. Return SOR Data
    QAA_Agent->>LLM: 11. Request Validation (Chunks vs SOR)
    LLM-->>QAA_Agent: 12. Return Discrepancies
    QAA_Agent->>TTA_App_UI: 13. Send Final Results

    alt Discrepancies Found
        TTA_App_UI->>TTA_App_UI: 14a. Route to HITL Review Queue
        TTA_App_UI->>User: 15a. Notify: "Review Required"
    else No Discrepancies
        TTA_App_UI->>TTA_App_UI: 14b. Mark as 'Completed'
        TTA_App_UI->>User: 15b. Notify: "Test Completed"
    end
```
