# tracing.py
"""
OpenTelemetry tracing module for Google ADK.
Supports Phoenix/Arize AX (via ax_mode flag), generic OTel backends, custom spans, and OCP HTTPS.
Call init_tracing() once to set up globally.
"""

import os
from typing import Optional

from opentelemetry import trace
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from openinference.instrumentation.google_adk import GoogleADKInstrumentor
import requests  # For custom HTTP session (insecure mode)

# Global flag for idempotency
_tracing_initialized: bool = False

def init_tracing(
    endpoint: Optional[str] = None,
    insecure: Optional[bool] = None,
    service_name: Optional[str] = None,
    timeout: Optional[int] = None,
    project_name: Optional[str] = None,
    ax_mode: bool = False  # Flag for Arize AX mode (vs Phoenix)
) -> None:
    """
    Initializes tracing with BatchSpanProcessor and HTTP OTLP exporter.
    
    Args:
        endpoint: OTLP endpoint (e.g., 'https://your-ocp-phoenix/v1/traces'). Defaults to env or cloud Phoenix/AX.
        insecure: Skip SSL verification for OCP self-signed certs. Defaults to env.
        service_name: Service name for traces. Defaults to env.
        timeout: Exporter timeout in ms. Defaults to env (30s).
        project_name: Project name for Phoenix/AX. Defaults to env or 'adk-default-project' (auto-creates if missing).
        ax_mode: If True, uses Arize AX attributes for platform evals. Defaults to False (Phoenix mode).
    
    Usage: Call once at startup. Custom spans via trace.get_tracer(__name__).
    """
    global _tracing_initialized
    if _tracing_initialized:
        return

    # Env defaults (overrides args if not provided)
    endpoint = endpoint or os.getenv('OTEL_EXPORTER_OTLP_ENDPOINT', 'https://otlp.arize.com/v1/traces')
    insecure = insecure if insecure is not None else os.getenv('OTEL_EXPORTER_OTLP_INSECURE', 'false').lower() == 'true'
    service_name = service_name or os.getenv('OTEL_SERVICE_NAME', 'adk-agent')
    timeout = timeout or int(os.getenv('OTEL_EXPORTER_OTLP_TIMEOUT', '30000'))
    
    # Project name with auto-default (Arize/Phoenix auto-creates if missing)
    project_name = project_name or os.getenv('ARIZE_PROJECT_NAME' if ax_mode else 'PHOENIX_PROJECT_NAME', 'adk-default-project')

    # Custom HTTP session for insecure mode (disables SSL verify)
    session = None
    if insecure:
        session = requests.Session()
        session.verify = False
        print("Warning: SSL verification disabled for insecure mode (use only in trusted envs)")

    # Set up resource with service + mode-specific project attributes
    attributes = {'service.name': service_name}
    if ax_mode:
        attributes['arize.project.name'] = project_name  # For AX evals/metadata
    else:
        attributes['phoenix.project.name'] = project_name  # For Phoenix grouping
    resource = Resource(attributes=attributes)
    provider = TracerProvider(resource=resource)
    trace.set_tracer_provider(provider)

    # Batch exporter over HTTP with optional insecure session
    exporter = OTLPSpanExporter(
        endpoint=endpoint,
        session=session,  # Applies verify=False if insecure
        timeout=timeout
    )
    span_processor = BatchSpanProcessor(
        exporter,
        max_export_batch_size=512  # Efficient batching
    )
    provider.add_span_processor(span_processor)

    # Instrument ADK for auto-tracing (agents, tools, LLMs)
    GoogleADKInstrumentor().instrument(tracer_provider=provider)

    _tracing_initialized = True
    mode_str = "AX" if ax_mode else "Phoenix"
    print(f"Tracing initialized ({mode_str} mode): Exporting to {endpoint} (insecure: {insecure}, project: {project_name})")

# Convenience function for custom spans (e.g., tools) - unchanged
def create_tool_span(tool_name: str, input_data: dict, parent_span=None) -> trace.Span:
    """Helper to start a custom tool span with attributes."""
    tracer = trace.get_tracer(__name__)
    span = tracer.start_span(
        name=f"tool.{tool_name}",
        attributes={
            "tool.name": tool_name,
            "tool.input": str(input_data),
            "span.kind": "TOOL"
        }
    )
    if parent_span:
        span.set_parent(parent_span.get_span_context())
    return span

# agent.py
"""
Example Google ADK agent with tracing from tracing.py.
"""

from google.adk import AgentEngine, Tool  # Your ADK imports
from tracing import init_tracing, create_tool_span  # Import from separate module
from opentelemetry import trace  # For manual spans

def custom_tool_call(tool_name: str, input_data: dict) -> str:
    """Custom tool with traced span."""
    span = create_tool_span(tool_name, input_data)
    
    try:
        # Your tool logic
        result = f"Processed {input_data} with {tool_name}"
        span.set_attribute("tool.success", True)
        span.set_attribute("tool.output", result[:100])
        span.end()
        return result
    except Exception as e:
        span.set_attribute("tool.success", False)
        span.record_exception(e)
        span.set_status("error", str(e))
        span.end()
        raise

if __name__ == "__main__":
    # Initialize tracing once (with AX mode example; set ax_mode=False for Phoenix)
    init_tracing(
        endpoint="https://your-ocp-phoenix/v1/traces",  # OCP-specific
        insecure=True,  # For self-signed certs
        ax_mode=True,  # Enable Arize AX mode for evals
        # project_name="my-ax-project"  # Optional; auto-defaults/creates if missing
    )

    # Define traced tool
    search_tool = Tool(
        name="search",
        description="Searches for info",
        function=lambda name, data: custom_tool_call(name, data)
    )
    
    # Set up and run agent
    engine = AgentEngine(
        model="gemini-pro",
        tools=[search_tool],
        # ... other config
    )
    
    # Optional: Wrap full run in custom span
    tracer = trace.get_tracer(__name__)
    with tracer.start_as_current_span(
        name="agent.query",
        attributes={"user.query": "Search for AI tools", "session.id": "sess-123"}
    ) as query_span:
        response = engine.run("Search for AI tools")
        query_span.set_attribute("agent.output.length", len(str(response)))
    
    print(f"Agent response: {response}")
