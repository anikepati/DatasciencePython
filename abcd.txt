# tracing.py
"""
Minimal tracing module for Google ADK (HTTP-only, error-resilient).
"""

import os
import logging
import certifi
import requests
from typing import Optional, Dict

logging.basicConfig(level=logging.INFO)  # Less verbose
logger = logging.getLogger(__name__)

# Set CA bundle early
os.environ['REQUESTS_CA_BUNDLE'] = certifi.where()

# Core OTel imports (with fallback)
try:
    from opentelemetry import trace
    from opentelemetry.sdk.resources import Resource
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor
    from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter as BaseHttpExporter
    OTel_AVAILABLE = True
except ImportError as e:
    logger.error(f"OTel import failed: {e} - Install 'opentelemetry-sdk opentelemetry-exporter-otlp[http]'")
    OTel_AVAILABLE = False

# ADK instrumentation (optional)
try:
    from openinference.instrumentation.google_adk import GoogleADKInstrumentor
    ADK_AVAILABLE = True
except ImportError:
    logger.warning("ADK instrumentation missing - Install 'openinference-instrumentation-google-adk google-adk'")
    ADK_AVAILABLE = False

# Phoenix (optional)
PHOENIX_AVAILABLE = False
phoenix_register = None
try:
    from phoenix.otel import register as phoenix_register
    PHOENIX_AVAILABLE = True
except ImportError:
    logger.debug("Phoenix optional - Install 'arize-phoenix-otel' for enhanced metadata")

# Block gRPC if present
try:
    import opentelemetry.exporter.otlp.proto.grpc
    logger.error("gRPC exporter detected - Uninstall 'opentelemetry-exporter-otlp-proto-grpc' to fix UNAVAILABLE errors")
except ImportError:
    pass

# Force HTTP
os.environ['OTEL_EXPORTER_OTLP_PROTOCOL'] = 'http/protobuf'

# CustomHttpExporter
class CustomHttpExporter(BaseHttpExporter):
    def __init__(self, *args, verify=True, **kwargs):
        super().__init__(*args, **kwargs)
        self._session = requests.Session()
        self._session.verify = verify
        self._session.trust_env = False
        adapter = requests.adapters.HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=3)
        self._session.mount('https://', adapter)
        if not verify:
            import urllib3
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        logger.debug(f"CustomHttpExporter: verify={verify}")

_tracing_initialized = False

def init_tracing(
    endpoint: str,
    insecure: bool = False,
    service_name: str = "adk-agent",
    timeout: int = 30000,
    project_name: str = "adk-default-project",
    ax_mode: bool = False,
    ca_bundle_path: Optional[str] = None,
    test_connectivity: bool = False  # Default False to avoid network errors
) -> None:
    global _tracing_initialized
    if _tracing_initialized:
        return
    if not OTel_AVAILABLE:
        logger.error("OTel not available - Skipping init")
        return

    if ca_bundle_path:
        os.environ['REQUESTS_CA_BUNDLE'] = ca_bundle_path

    # Validate endpoint
    if "localhost" in endpoint.lower() or "4317" in endpoint:
        raise ValueError(f"Invalid endpoint '{endpoint}' - Use OCP HTTPS /v1/traces")
    if not endpoint.endswith('/v1/traces'):
        endpoint += '/v1/traces'

    verify = ca_bundle_path or (not insecure)
    logger.info(f"Tracing init: endpoint={endpoint}, insecure={insecure}, verify={verify}, ax_mode={ax_mode}")

    # Resource
    attributes = {'service.name': service_name}
    if ax_mode:
        attributes['arize.project.name'] = project_name
    else:
        attributes['phoenix.project.name'] = project_name
    resource = Resource(attributes=attributes)
    provider = TracerProvider(resource=resource)
    trace.set_tracer_provider(provider)

    # Connectivity test (optional)
    if test_connectivity:
        test_session = requests.Session()
        test_session.verify = verify
        try:
            resp = test_session.head(endpoint, timeout=timeout / 1000)
            logger.info(f"Connectivity: {resp.status_code}")
        except Exception as e:
            logger.warning(f"Connectivity failed: {e}")

    # Exporter
    try:
        exporter = CustomHttpExporter(
            endpoint=endpoint,
            verify=verify,
            timeout=timeout
        )
        span_processor = BatchSpanProcessor(exporter, max_export_batch_size=512)
        provider.add_span_processor(span_processor)
        logger.info("Exporter initialized")
    except Exception as e:
        logger.error(f"Exporter failed: {e}")
        raise

    # Phoenix registration
    if PHOENIX_AVAILABLE:
        try:
            phoenix_register(
                project_name=project_name,
                endpoint=endpoint if 'otlp.arize.com' in endpoint else None,
                auto_instrument=True
            )
            logger.info("Phoenix registered")
        except Exception as e:
            logger.warning(f"Phoenix skipped: {e}")

    # ADK
    if ADK_AVAILABLE:
        try:
            GoogleADKInstrumentor().instrument(tracer_provider=provider)
            logger.info("ADK instrumented")
        except Exception as e:
            logger.warning(f"ADK instrumentation skipped: {e}")

    _tracing_initialized = True

def create_tool_span(tool_name: str, input_data: Dict, parent_span=None) -> Optional[trace.Span]:
    if not OTel_AVAILABLE:
        return None
    tracer = trace.get_tracer(__name__)
    span = tracer.start_span(
        name=f"tool.{tool_name}",
        attributes={
            "tool.name": tool_name,
            "tool.input": str(input_data),
            "span.kind": "TOOL"
        }
    )
    if parent_span:
        span.set_parent(parent_span.get_span_context())
    logger.debug(f"Tool span: {tool_name}")
    return span


# agent.py
from tracing import init_tracing, create_tool_span
from opentelemetry import trace

def custom_tool_call(tool_name: str, input_data: dict) -> str:
    span = create_tool_span(tool_name, input_data)
    if span:
        try:
            result = f"Processed {input_data} with {tool_name}"
            span.set_attribute("tool.success", True)
            span.end()
            return result
        except Exception as e:
            span.set_attribute("tool.success", False)
            span.record_exception(e)
            span.end()
            raise
    return f"Untraced: Processed {input_data} with {tool_name}"

if __name__ == "__main__":
    # Hardcoded
    init_tracing(
        endpoint="https://your-ocp-phoenix.apps.cluster.com/v1/traces",  # Your URL
        insecure=True,
        ax_mode=True,
        test_connectivity=False
    )

    # Test span & flush
    tracer = trace.get_tracer(__name__)
    with tracer.start_as_current_span("test"):
        pass
    trace.get_tracer_provider().force_flush(timeout_millis=5000)
    print("Test run complete")

    # ADK (add your engine here)
    # from google.adk import AgentEngine
    # engine = AgentEngine(...)
    # response = engine.run("Query")
